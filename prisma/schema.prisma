// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement()) @map("id")
  name          String
  email         String        @unique
  password      String
  nickname      String        @unique
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  refreshtokens RefreshToken?
  comments      Comment[]
  postmodals    PostModal[]
  likes         Like[]
  followingid   Follow?       @relation("FollowingId")
  followerid    Follow?       @relation("FollowerId")

  @@map("users")
}

model RefreshToken {
  id           Int      @id @default(autoincrement()) @map("id")
  usersId      Int      @unique @map("user_id")
  refreshtoken String   @map("refreshtoken")
  createdAt    DateTime @default(now()) @map("created_at")

  Users User @relation(fields: [usersId], references: [id], onDelete: Cascade)

  @@map("refreshtoken")
}

model PostModal {
  id                 Int      @id @default(autoincrement()) @map("id")
  authorid           Int      @map("userid")
  image              String?
  title              String
  content            String
  deleteYn           deleteYn @default(YES)
  scheduledTimeStart DateTime
  scheduledTimeEnd   DateTime
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  author User @relation(fields: [authorid], references: [id], onDelete: Cascade)

  likes Like[]

  @@map("postmodal")
}

model Comment {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("userid")
  PostId    Int      @map("postid")
  nickname  String   @unique @map("nickname")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Users User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Likes Like[]

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("userid")
  PostId    Int      @map("postid")
  commentId Int      @map("commentid")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Users    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Posts    PostModal @relation(fields: [PostId], references: [id], onDelete: Cascade)
  Comments Comment   @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Follow {
  id          Int @id @default(autoincrement()) @map("id")
  followingId Int @map("followingId")
  followerId  Int @map("followerId")

  Following User? @relation("FollowingId", fields: [followingId], references: [id])
  Follower User? @relation("FollowerId", fields: [followerId] references: [id])

  @@map("follows")
}

enum UserRole {
  USER
  ADMIN
}

enum deleteYn {
  YES
  NO
}
