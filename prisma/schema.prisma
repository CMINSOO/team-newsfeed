generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement()) @map("id")
  name          String
  email         String        @unique
  password      String
  nickname      String        @unique
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  likes         Like[]
  comments      Comment[]
  postmodals    PostModal[]
  refreshtokens RefreshToken?

  @@map("users")
}

model RefreshToken {
  id           Int      @id @default(autoincrement()) @map("id")
  usersId      Int      @unique @map("user_id")
  refreshtoken String   @map("refreshtoken")
  createdAt    DateTime @default(now()) @map("created_at")
  Users        User     @relation(fields: [usersId], references: [id], onDelete: Cascade)

  @@map("refreshtoken")
}

model PostModal {
  id                 Int       @id @default(autoincrement()) @map("id")
  authorid           Int       @map("userid")
  image              String?
  title              String
  content            String
  deleteYn           deleteYn  @default(YES)
  scheduledTimeStart DateTime
  scheduledTimeEnd   DateTime
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  likes              Like[]
  comments           Comment[]
  author             User      @relation(fields: [authorid], references: [id], onDelete: Cascade)

  @@index([authorid], map: "postmodal_userid_fkey")
  @@map("postmodal")
}

model Comment {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("userid")
  PostId    Int      @map("postid")
  nickname  String   @map("nickname")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Likes     Like[]
  PostModal PostModal @relation(fields: [PostId], references: [id], onDelete: Cascade)
  Users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([PostId], map: "comments_postid_fkey")
  @@index([userId], map: "comments_userid_fkey")
  @@map("comments")
}

model Like {
  id        Int       @id @default(autoincrement()) @map("id")
  userId    Int       @map("userid")
  PostId    Int       @map("postid")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Posts     PostModal @relation(fields: [PostId], references: [id], onDelete: Cascade)
  Users     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment   Comment?  @relation(fields: [commentId], references: [id])
  commentId Int?

  @@index([PostId], map: "Like_postid_fkey")
  @@index([userId], map: "Like_userid_fkey")
}

enum UserRole {
  USER
  ADMIN
}

enum deleteYn {
  YES
  NO
}
